<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shmokmt</title>
    <link>https://sh-tech.work/</link>
    <description>Recent content on shmokmt</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 14 Jun 2020 21:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://sh-tech.work/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GitHub ActionsでJupyter Notebookをlintする</title>
      <link>https://sh-tech.work/post/2020/06/jupyter-ci/</link>
      <pubDate>Sun, 14 Jun 2020 21:00:00 +0900</pubDate>
      
      <guid>https://sh-tech.work/post/2020/06/jupyter-ci/</guid>
      <description>はじめに Jupyter Notebook の継続的インテグレーションについての記事があまり見当たらなかったので、どんなツールがあるのか調べた。
ツール Jupyter Notebookの場合、エディタでlintをかけようとするツールがほとんどでCIでValidationをかけることのできるツールが見当たらない。 とくに使い捨てではなく、それなりにメンテナンスしていく使い方をする場合はエディタのlintだけだと物足りなさを感じる。
 mlshapiro/jupyterlab-flake8 ikegami-yukino/autopep8magic  結論として、GitHub Actionsを使っているのであれば、flake8-jupyter-notebookを使うと良い。 
既存の類似プロジェクトとしてflake8-nbがある。しかし、リント結果をファイルの行番号ではなく、各セルの行番号で出力し、それがGitHub上のレビューと非常に相性が悪い（.ipynb の実態はJSONファイルである）
そこで、flake8-jupyter-notebookではセルのソースコードを全て抜き出し、flake8の入力としてパイプで繋いでいる。</description>
    </item>
    
    <item>
      <title>社会人2年目になった</title>
      <link>https://sh-tech.work/post/2020/04/summary_2019/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sh-tech.work/post/2020/04/summary_2019/</guid>
      <description>社会人2年生になった
以下は昨年度を通してできるようになったことです
やったこと / できるようになったこと Python3 たくさん書いた スクリプト/CLIなら人並みにかけるようになりました。 FlaskなどのWebアプリケーション用途では使ってないので、そちらには明るくないです。 Python3 に関しては大体CTOから全部教わりました。
タスクの依存関係が複雑なバッチ処理をメンテナンスした これが昨年度の自分の主な仕事でした。 怪しい臭いがするところにロギングを仕込んだりするとかはまだまだ自分はきちんとできないので、これからの課題です。
新型コロナウイルス感染症対策サイトをリリースした 有給期間に帰省してた大分県で集団感染に危機を感じたのがはじまりでした。 いまは有給期間が終わってそんなにコミットできないので、高専生の頃から仲がよかったnojiri1098とissueとPRのメンテナンスをやってくれています。声かけて本当によかったです。 他にも何人かコントリビューションしてくれて、予想していたよりも本格的なプロジェクトになりました。 このサイトが不要になり、クローズできる日がくることをいち早く望みます。
 VS Code Meetup で登壇した 勢いで応募しました。自分はそんなに人前で話したりするタイプじゃないので、度胸試しみたいな気持ちで応募しました。 勢いで弊社SlackにもVS Codeユーザが集まるチャンネルを作ったりしました。
メリット/デメリット考えながらライブラリの選定とかできるようになった 運用時の制約やOSSのメンテナンス具合を考慮してライブラリの選定をできるようになりました。 直近だとPythonの仮想環境&amp;amp;パッケージ管理ツールであるPipenvのメンテナンスが滞ってしまい、Poetryへの移行を検討したりしました。 このような意思決定は実務で運用を経験しないと身につかないスキルだと思います。
 一次情報に触れるようになった ビビらずに公式ドキュメントを読むようになりました。 必要に応じてGitHubのissueを開いたりできるようになりました。 あとは、Google翻訳に頼らずに早く英語を読み書きできるようになることが今後の課題です。
 おわりに ＼( &amp;lsquo;ω&amp;rsquo;)／ウオオオオアアーーーッッ！！！</description>
    </item>
    
    <item>
      <title>GDG DevFest Tokyo 2019 参加レポート</title>
      <link>https://sh-tech.work/post/2019/12/devfest2019/</link>
      <pubDate>Tue, 24 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sh-tech.work/post/2019/12/devfest2019/</guid>
      <description>はじめに ※この記事はフラー Advent Calendar 2019 の24日目の記事です。23日は@RyotaMurohoshi さんの TypeScriptでnoImplicitAnyを導入するために、妥協してsuppressImplicitAnyIndexErrorsを導入する でした。
先日、GDG Tokyo が開催する DevFest2019 に参加した。
自分は業務で使っていないが、弊社で他のメンバーが使っている技術スタックのセッションがそれなりにあったので、興味本位で参加してみた。
 聴講したセッション 岩尾 エマ はるか / 円周率世界記録への道 彼女自身がどのようにエンジニアのキャリアを形成し、円周率の世界記録を更新したかについての話だった。
彼女が中学生の頃に書いたオセロゲームのコードの変数名が適切でなかったエピソードなども面白かった。 （当時、英単語がわからなかったので、オセロの枠の変数名を border などではなく、waku で宣言していたようだ。）
Life with open mind これは彼女のブログであるが、Linux Kernel に強い興味を示しており、彼女自身の技術に対する探究心が伺える。
彼女に関する情報は以下にわかりやすくまとまっている。
 太田 満久 / TensorFlow の使い方 〜 TF2.x とエコシステム 〜 自分はTensorFlowに関しては一度も今まで使ったことなかったが、それでも大まかな雰囲気をキャッチアップできるぐらいには非常にまとまっている良いプレゼンテーションだった。
近年では、TensorFlow.js や TensorFlow Lite などクライアントでMLをするために必要なものが割と整備されてきた印象がある。 クライアントMLのモチベーションとして
 ネットワークのない環境でも利用できる ネットワークの遅延を気にする必要がなくなる サーバーサイドにデータを送らないため、プライバシーの問題が発生しない 等が挙げられるらしい。  デモでは、GAされたばかりのCloud Run でML用のAPIを作り、披露していた。
 今はアノテーションツールとかいうのも充実してるらしく、これはデータに対して正解ラベルを付与するものである。
山口 能迪 / Goの10年の道のりとその変遷 10周年を迎えたGoの今までとこれからについてのセッションだった。
ALGOLからCやPASCALなどの言語が生まれ、それらのエンジニアたちが作り上げた言語がGoであること。C++が言語として大きく、ビルドが遅くなってしまったことがGoを作るモチベーションになっていることが説明されていた。</description>
    </item>
    
    <item>
      <title>コマンドラインのオプションの設計について</title>
      <link>https://sh-tech.work/post/2019/12/cli-design/</link>
      <pubDate>Wed, 11 Dec 2019 22:00:52 +0900</pubDate>
      
      <guid>https://sh-tech.work/post/2019/12/cli-design/</guid>
      <description>※この記事はフラーAdvent Calendar 2019の12日目です。11日目は@okuzawatsさんでフラー株式会社でもバグバッシュ大会をやってみたでした。
はじめに 私は業務効率化のためのCLIを実装することが多い。 いざ実装して使ってみたら直感的に操作しにくいあるいは、理解しにくいなと思うことが度々ある。
そこで今回はコマンドラインのオプションについて調べてみた。
POSIX POSIX とは Portable operating system interface の略であり、異なるOS間で移植性に優れたソフトウェアを開発するための規格である。
POSIXの規格についてはUtility Conventionsが参考になる。
GNU POSIXに対し、GNUでも独自の規格が定められている。
ここで大事なのは、 GNU規格はPOSIX規格を拡張したものであるということである。実際に、Standards for Command Line Interfacesでも
 It is a good idea to follow the POSIX guidelines for the command-line options of a program. The easiest way to do this is to use getopt to parse them. Note that the GNU version of getopt will normally permit options anywhere among the arguments unless the special argument ‘&amp;ndash;’ is used.</description>
    </item>
    
    <item>
      <title>Hugo 0.57.0 でPostsのみ表示される件</title>
      <link>https://sh-tech.work/post/2019/12/hugo/</link>
      <pubDate>Sun, 08 Dec 2019 00:58:06 +0900</pubDate>
      
      <guid>https://sh-tech.work/post/2019/12/hugo/</guid>
      <description>Hugoのレイアウトが崩れた このブログはHugoで書いているが、突然トップページにPostsのみが表示されるようになってしまいコンテンツを正しくリストアップできなくなってしまった。
Hugo使い方忘れた
これを機会にGatsbyにして
自作テーマ0から作ろうかな
&amp;mdash; shmokmt (@shmokmt) December 7, 2019  だいぶ長いこと記事を書いていなかったので、自分がHugoの使い方を忘れてしまったんじゃないかと思った。
実際はそんなことはなく、 Hugo 0.57.0 からの仕様変更だった。
詳細は以下のRelease Note と issue に記載されてある。
  This made it easy to list all the pages on home page, but it also meant that you needed to take special care if you wanted to navigate the page tree from top to bottom. If you need all regular pages, use .Site.RegularPages
 とてもつらい（画像略
 解決方法  自分の場合は現象が上記とまったく同じだったので、.</description>
    </item>
    
    <item>
      <title>コメントを書くときに気をつけたいこと</title>
      <link>https://sh-tech.work/post/2019/06/readable-code/</link>
      <pubDate>Fri, 07 Jun 2019 03:48:04 +0900</pubDate>
      
      <guid>https://sh-tech.work/post/2019/06/readable-code/</guid>
      <description>リーダブルコードを読んだ。 確か、この本は1年半ほど前に購入してサラっと読んで それっきり読んでなかった。
久しぶりにちゃんと読み返してみた。
コードは他の人が最短時間で理解できるように書かなければいけない。 たとえ自分ひとりのプロジェクトだったとしても、「他の人」は自分のコードに見覚えのない6ヶ月後の「自分自身」であるかもしれない。
小さいことがいいこととは必ずしも限らない コードは短くしたほうがいい。だけど、理解する時間を短くするほうが大切。
コメントは自分の考えを記録する 自明であることをコメントとして書く必要はない。
本書では例として以下のように取り上げられている。
// このクラスは汚くなっている // サブクラス `ResouceNode` を作って整理したほうが良いかも これをより使い分けるためには
TODO:　（あとでやる） FIXME:　（既知の不具合があるコード） HACK: （あまりキレイじゃない解決策） XXX:　（危険 / 問題がある） などを使う。
定数にコメントをつける NUM_THREADS = 8 # 値は「&amp;gt;=2 * num_processors」で十分 というコメントがあれば定数が決まった背景が理解でき、 これ以上調整する必要がないことがわかる。
新しいチームのメンバーの気持ちになる 新しいチームメンバーにとって最も難しいのは「全体像」の理解である。 クラスはどのように連携しているのか。デーアはどのように流れているのか。
例えば以下のような会話があったとする。
「このクラスは複雑だが、単なるキャッシュです」
これはソースコードを読んだだけでは得られない情報である。 本書はこれをコメントとして書くことを推奨している。
私自身は小さなプロジェクトであればREADMEなどに ディレクトリ構造（tree）を図示するなどし、簡潔な説明を付け加えるなどでも良いと思う。
標準のライブラリを知る 標準のライブラリを知らないがために 自分でスクラッチで実装してしまうことも少なくない。 少ない行かつ簡潔でわかりやすいならそちらを優先する。
リストから重複する値を削除したいとする。 その場合は関数を作るよりもPythonのSet（集合）を使ったほうが 容易に実装できる。
テストコードを読みやすくする 大切な情報は目立つようにし、そうでない情報はユーザから隠す。
具体的にはヘルパー関数を作ったりする。
テストの本質は「こういう状況でこういう入力からこういう振る舞いと出力を期待する」というレベルまで要約できることである。さらに、これは少ない行で簡潔に表現できることが多い。
まとめ コメントにはWhatではなく、Whyを書くべきである。
設計のミスに気づくのはテストコードを書くことがやはり大切。</description>
    </item>
    
    <item>
      <title>Web APIにおけるデータフォーマットの指定方法</title>
      <link>https://sh-tech.work/post/2019/06/webapi/</link>
      <pubDate>Mon, 03 Jun 2019 03:48:04 +0900</pubDate>
      
      <guid>https://sh-tech.work/post/2019/06/webapi/</guid>
      <description>Web API The Good Partsを読んだ。
業務でWeb APIを設計および実装をしたことがほとんどないので、学びが非常に多かった。
個人的に大事だと思ったところを備忘録のため書き記す。
データフォーマットの指定方法 APIのフォーマットはJSONがデファクトスタンダードであるが、XMLもサポートしたい場合などは クライアントにどのように取得したい形式を指定させるべきか考える。
一般的に以下の方法が使われている。
 クエリパラメータを使う方法 拡張子を使う方法 リクエストヘッダでメディアタイプを指定する方法  1つ目のクエリパラメータを使う方法は以下のようにして、jsonやxmlといったデータ形式を指定する方法である。
https://api.example.com/v1/users?format=xml
2つ目は拡張子を使う方法で、ファイルに拡張子をつけるのと同じようにURIの最後に.jsonや.xmlをつけてデータ形式を指定するものである。
https://api.example.com/v1/users.json
3つ目はAcceptというリクエストヘッダを使う方法である。Acceptは受け取りたいメディアタイプを指定するための HTTPヘッダで、データ形式を指定することで「この形式でデータを受け取りたい」ということをサーバに対して伝えることができる。
どれを使えば良いのか HTTPの仕様を最大限に活用する場合はリクエストヘッダで指定する場合が理想的であるが、やや敷居が高いという問題がある。 多くのサービスはクエリパラメータで取得することが多い。 本書でもクエリパラメータで取得することを推奨している。
なるほど。本書の残りの後半部分であるキャッシュやステータスコードの章はまだ読んでないので、今から読む。</description>
    </item>
    
    <item>
      <title>任意のJDKをHomebrew経由でインストールする</title>
      <link>https://sh-tech.work/post/2019/04/jdk/</link>
      <pubDate>Fri, 05 Apr 2019 03:48:04 +0900</pubDate>
      
      <guid>https://sh-tech.work/post/2019/04/jdk/</guid>
      <description>はじめに macOSに任意のJDKをインストールしたい。
TL;DR   複数のプロジェクトで異なるバージョンを使用するときはjEnvが良さげ。
  単一のJavaのプロジェクトしか扱わない場合は homebrew で versions をtapする。
  こちらに関しては以下のリンクが参考になる。 【Mac】HomebrewでJavaをインストールする - Reasonable Code homebrew-versionsはその名の通り、バージョンを指定してインストールする拡張機能である。
$ brew tap caskroom/versions
その後、以下をjavaをsearchしてみる。
$ brew search java ==&amp;gt; Formulae app-engine-java google-java-format javarepl jslint4java libreadline-java ==&amp;gt; Casks charles-applejava java ✔ java6 oracle-jdk-javadoc charles-applejava java ✔ java8 oracle-jdk-javadoc eclipse-java java-beta java8 yourkit-java-profiler eclipse-java java-beta netbeans-java-ee yourkit-java-profiler eclipse-javascript java11 netbeans-java-ee eclipse-javascript java11 netbeans-java-se font-noto-sans-javanese java6 netbeans-java-se ※ここでtapした拡張機能は /usr/local/Homebrew/Library/Taps に存在する。
❯ ls /usr/local/Homebrew/Library/Taps caskroom	homebrew	sachaos	yusukehosonuma heroku	rcmdnk	sanemat /usr/libexec caskでJDKをインストールした後はインストールされた場所を調べる。</description>
    </item>
    
    <item>
      <title>フラー株式会社に入社しました</title>
      <link>https://sh-tech.work/post/2019/04/fuller/</link>
      <pubDate>Mon, 01 Apr 2019 03:48:04 +0900</pubDate>
      
      <guid>https://sh-tech.work/post/2019/04/fuller/</guid>
      <description>はじめに フラー株式会社に入社しました。
 経緯/入社の決めて 入社の決め手はオフィスで楽しそうに働いている自分が容易に想像できたことです。
職種はソフトウェアエンジニアです。
おわりに やっていくぞという気持ちです。 どうぞよろしくお願いします。</description>
    </item>
    
    <item>
      <title>flamingo</title>
      <link>https://sh-tech.work/post/2018/11/flamingo/</link>
      <pubDate>Mon, 12 Nov 2018 03:48:04 +0900</pubDate>
      
      <guid>https://sh-tech.work/post/2018/11/flamingo/</guid>
      <description>はじめに 「flamingo」は米津玄師の9th Singleである。リリース前に幕張メッセで[米津玄師 LIVE2018 / flamingo]が開催されて、4万人を動員している。
01.flamingo  男性が想い焦がれる女性に振られた表現した一曲 沖縄の民謡である「島唄」を意識して作曲されている。  02.TEENAGE RIOT  彼自身が中学生のときに作曲したものである。（厳密には多少のリメイクが施されているらしい。） くすぶっている若者の葛藤した気持ちがスピード感のあるメロディーにのせられている。 Bassを日向秀和が担当している。 PVもロックバンドテイストに仕上がっている。  03.ごめんね  大切にしている人への愛情が根底にある一曲。  「祈る声は激しく」から現実は無情であり、理想とはかけ離れている状況が伺える。   ゲーム「UNDERTALE」をきっかけに制作された。  「誰も死ななくていいやさしいRPG」    おわりに 先日、幕張メッセのライブに参加したけどすごくよかった。 また行きたい。
   出典：Flamingo / TEENAGE RIOT | 米津玄師 official site「REISSUE RECORDS」 </description>
    </item>
    
  </channel>
</rss>